2012-02-02  MIYAMUKO Katsuyuki

	* (http-request, http-progress): onprogress イベントハンドラを追加
	- 引数は http-progress 構造体

	* receiver 周りをいろいろ改善
	- http-string-receiver
	  - http-response-result の 2 回目以降に結果が取れなかったのを修正
	    - get-output-stream-string は 1 回しか呼べない
	  - content-length が分かっているなら指定サイズ分の内部バッファを
	    作っておくようにした
	- http-oport-receiver
	  - sink, flusher を引数に取る receiver
	- http-general-receiver
	  - http-stream-chunk-receiver と http-stream-line-receiver を統合
	- http-cond-receiver
	  - status コードなどで receiver を切り替えるための便利マクロ
	- make-stream-callback
	  - stream 周りの処理の共通部分を抽出した

2012-02-01  MIYAMUKO Katsuyuki

	* 仕様と実装を大きく変更というか再実装した
	- 非同期 API をデフォルトにした
	- Ctrl-g で止めれるように非同期 API をベースに同期 API を実装した
	- 戻り値は future オブジェクトにした
	  - 結果を取得しようとした時点でレスポンスを待つ
	  - http-response-wait で明示的に待つことも可能
	- server と path を別々に指定するのをやめて、URL で指定するようにした
	- ヘッダは :headers 引数で指定するようにした
	- sink / flusher をやめて receiver を追加
	  - receiver は Gauche と違って chunk を受け取る関数を返す関数である
	  - (status-code, header-alist, total-length) -> ((chunk) -> a)
	- :request-encoding を :encoding に変更
	- :auth, :proxy-auth を追加
	- :wait t を指定すると同期 API になるが戻り値は future オブジェクトを返す
	  - http-response-result などで値を取得する
	  - http-response-values で (body, status-code, header-alist, uri) を
	    多値で取得可能する
	    - uri はリダイレクト後の URL
	- :oncomplete の引数は (body, status-code, header-alist, uri) とした
	- :onabort を追加

2012-01-25  MIYAMUKO Katsuyuki

	* 非同期処理用の API を追加
	- http-request-abort
	  - 非同期処理を中断
	- http-request-aborted-p
	  - 非同期処理が中断したかどうか
	- http-request-completed-p
	  - 非同期処理が完了したかどうか
	- http-request-waiting-p
	  - 非同期処理の完了待ちかどうか

	* 非同期処理のコードを整理
	- http-client.async を http-client.base パッケージに統合
	- 非同期処理時に :no-redirect や :proxy を無視しているのを修正

2012-01-24  MIYAMUKO Katsuyuki

	* (finish-output): flusher を呼ぶ前に sink に対して
	finish-output を呼ぶようにした

	* Content-Length が間違っているとブロックしてしまうので、
	レスポンスヘッダの Content-Length を見るのをやめた

	* (http-client-version): http-client.api パッケージに移動

	* パッケージ名を変更
	- http-client.gauche => http-client.api
	- http-client.node => http-client.async
	- http-client.api でほとんどのユースケースに対応できると思うので
	  http-client.async は非公開の API とした
	  (リファレンスを書くのが面倒だからとかじゃないです!)

2012-01-23  MIYAMUKO Katsuyuki

	* (reference/http-client.gauche.md): Gauche 互換 API のリファレンスを追加
	半分ぐらい Gauche のリファレンスのコピペです m(__)m
	http://practical-scheme.net/gauche/man/gauche-refj_146.html

	* (http-request): 任意の HTTP メソッドを送れるように Export (Gauche 非互換)

	* (http-*): server に完全な URL を指定可能にした (Gauche 非互換)
	- 以下の 4 つはすべて同じである
	(http-get "https://www.google.co.jp/search?q=xyzzy" nil)
	(http-get "https://www.google.co.jp/search" '(nil (q "xyzzy")))
	(http-get "https://www.google.co.jp" '("/search" (q "xyzzy")))
	(http-get "www.google.co.jp" '("/search" (q "xyzzy")) :secure t)

	* レスポンスに Content-Length があれば、バッファサイズ分一気に読み込むことで
	イベントの発生回数を減らして高速化

2012-01-21  MIYAMUKO Katsuyuki

	* Gauche 互換 API で非同期処理を追加

2012-01-20  MIYAMUKO Katsuyuki

	* multipart/form-data 周りを修正
	- ファイルの中身を全部送信していなかったのを修正
	- (("key1" "value1") ("key2" :value "value2")) がエラーになっていたのを修正
	- ファイルの存在チェックをするようにした
	- boundary に記号を含めないようにした
	  - 記号ありだとエラーになるアップローダがあった
	- Content-Transfer-Encoding と Content-Type は指定された場合のみ
	  生成するようにした
	  - Content-Transfer-Encoding: binary を付けるとファイルにゴミが入る
	    アップローダがあった

	* (http-post, http-put, http-compose-form-data): form-data に対応
	(http-put "localhost:3000" "/upload"
	          '(("upload" :file "logo.png" :content-type "image/png")))
	content-transfer-encoding は binary のみサポート

2012-01-19  MIYAMUKO Katsuyuki

	* Gauche 互換 API をさらにちょこっと作成
	- http-compose-query
	- proxy, no-redirect 対応

	(http-get "www.google.co.jp"
	          '("/search" (q "xyzzy 読み方") (num 20) (ie "utf-8") (oe "shift_jis"))
	          :request-encoding *encoding-utf8n*)
	(http-compose-query "/search"
	                    '((q "xyzzy 読み方") (num 20) (ie "utf-8") (oe "shift_jis"))
	                    *encoding-utf8n*)

2012-01-18  MIYAMUKO Katsuyuki

	* Gauche 互換 API をちょこっと作成

	* 一般的なユーティリティを http-client/base に移動

	* とりあえず Node.js ほぼ互換 API を作成

2012-01-17  MIYAMUKO Katsuyuki

	* http-client 作成開始

